/* tslint:disable */
/* eslint-disable */
/**
 * Dockops-board API specification
 * Dockops-board is an open source manager for docker containers with web UI
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  Container,
  Message,
  User,
  V1ContainerCreatePostRequest,
  V1LoginPostRequest,
  V1UserNewPostRequest,
} from '../models';
import {
  ContainerFromJSON,
  MessageFromJSON,
  UserFromJSON,
  V1ContainerCreatePostRequestToJSON,
  V1LoginPostRequestToJSON,
  V1UserNewPostRequestToJSON,
} from '../models';

export interface V1ContainerCreatePostOperationRequest {
  body?: V1ContainerCreatePostRequest;
}

export interface V1ContainerDbContainerIdAttachPostRequest {
  dbContainerId: number;
}

export interface V1ContainerDbContainerIdLogsGetRequest {
  dbContainerId: number;
  tail?: number;
}

export interface V1ContainerDbContainerIdStartPostRequest {
  dbContainerId: number;
}

export interface V1LoginPostOperationRequest {
  body?: V1LoginPostRequest;
}

export interface V1UserNewPostOperationRequest {
  body?: V1UserNewPostRequest;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   */
  async v1ContainerAllGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Container>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/container/all`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContainerFromJSON));
  }

  /**
   */
  async v1ContainerAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Container>> {
    const response = await this.v1ContainerAllGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async v1ContainerCreatePostRaw(
    requestParameters: V1ContainerCreatePostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Message>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v1/container/create`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: V1ContainerCreatePostRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
  }

  /**
   */
  async v1ContainerCreatePost(
    requestParameters: V1ContainerCreatePostOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Message> {
    const response = await this.v1ContainerCreatePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async v1ContainerDbContainerIdAttachPostRaw(
    requestParameters: V1ContainerDbContainerIdAttachPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Message>> {
    if (requestParameters.dbContainerId === null || requestParameters.dbContainerId === undefined) {
      throw new runtime.RequiredError(
        'dbContainerId',
        'Required parameter requestParameters.dbContainerId was null or undefined when calling v1ContainerDbContainerIdAttachPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/container/{dbContainerId}/attach`.replace(
          `{${'dbContainerId'}}`,
          encodeURIComponent(String(requestParameters.dbContainerId))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
  }

  /**
   */
  async v1ContainerDbContainerIdAttachPost(
    requestParameters: V1ContainerDbContainerIdAttachPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Message> {
    const response = await this.v1ContainerDbContainerIdAttachPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async v1ContainerDbContainerIdLogsGetRaw(
    requestParameters: V1ContainerDbContainerIdLogsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Message>> {
    if (requestParameters.dbContainerId === null || requestParameters.dbContainerId === undefined) {
      throw new runtime.RequiredError(
        'dbContainerId',
        'Required parameter requestParameters.dbContainerId was null or undefined when calling v1ContainerDbContainerIdLogsGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.tail !== undefined) {
      queryParameters['tail'] = requestParameters.tail;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/container/{dbContainerId}/logs`.replace(
          `{${'dbContainerId'}}`,
          encodeURIComponent(String(requestParameters.dbContainerId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
  }

  /**
   */
  async v1ContainerDbContainerIdLogsGet(
    requestParameters: V1ContainerDbContainerIdLogsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Message> {
    const response = await this.v1ContainerDbContainerIdLogsGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async v1ContainerDbContainerIdStartPostRaw(
    requestParameters: V1ContainerDbContainerIdStartPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Message>> {
    if (requestParameters.dbContainerId === null || requestParameters.dbContainerId === undefined) {
      throw new runtime.RequiredError(
        'dbContainerId',
        'Required parameter requestParameters.dbContainerId was null or undefined when calling v1ContainerDbContainerIdStartPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/container/{dbContainerId}/start`.replace(
          `{${'dbContainerId'}}`,
          encodeURIComponent(String(requestParameters.dbContainerId))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
  }

  /**
   */
  async v1ContainerDbContainerIdStartPost(
    requestParameters: V1ContainerDbContainerIdStartPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Message> {
    const response = await this.v1ContainerDbContainerIdStartPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async v1LoginPostRaw(
    requestParameters: V1LoginPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v1/login/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: V1LoginPostRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async v1LoginPost(
    requestParameters: V1LoginPostOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.v1LoginPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async v1UserNewPostRaw(
    requestParameters: V1UserNewPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<User>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v1/user/new`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: V1UserNewPostRequestToJSON(requestParameters.body),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   */
  async v1UserNewPost(
    requestParameters: V1UserNewPostOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<User> {
    const response = await this.v1UserNewPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
